package gravitree

import (
	"math"
	"testing"
)

func TestAccelerationPrimitives(t *testing.T) {
	tests := []struct {
		acc [][3]float64
	}{
		{[][3]float64{
			{0, 0, 1.25},
			{0, 0, 0},
			{0, 0, -1.25},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0}}}, // pairwise
		{[][3]float64{
			{0, 1.44299611, 0.53243883},
			{0, 1.70710678, 0.0},
			{0, 1.44299611, -0.53243883},
			{0, 0, 0},
			{0, 0, 0},
			{0, 0, 0}}}, // one-sided
		{[][3]float64{
			{0, 1.06066017, 1.06066017},
			{0, 3, 0},
			{0, 1.06066017, -1.06066017},
			{0, 0, 0.},
			{0, 0, 0.},
			{0, 0, 0.}}}, // monopole
	}
	tree := &Tree{}
	tree.Points = [][3]float64{{0, 0, 0}, {0, 0, 2}, {0, 0, 1},
		{0, 1, 1}, {0, 1, 0}, {0, 1, 2}}
	tree.Index = []int{0, 2, 1, 4, 3, 5}
	acc := make([][3]float64, 6)

	tree.Nodes = []Node{{Start: 0, End: 3, Center: [3]float64{0, 0, 1}},
		{Start: 3, End: 6, Center: [3]float64{0, 1, 1}}}
	tree.eps2 = 0.0

	for i := range tests {

		test := tests[i]

		for j := range acc {
			acc[j] = [3]float64{0, 0, 0}
		}

		switch i {
		case 0:
			tree.pairwiseAcceleration(0, acc)
		case 1:
			tree.oneSidedAcceleration(0, 1, acc)
		case 2:
			tree.monopoleAcceleration(0, 1, acc)
		}

		flat_acc := flatten3(acc)
		flat_test := flatten3(test.acc)

		if !multArrayAlmostEq(flat_acc, 1.0, flat_test, 1e-3) {
			t.Errorf("%d.0) expected acc = 1*%.4f, but acc = %.4f.",
				i, test.acc, acc)
		}
	}
}

// should probably make a generic function so
// we don't have to keep flattening these damn things!
func flatten3(x [][3]float64) []float64 {
	flat := make([]float64, len(x)*3)

	for i := range x {
		for j := 0; j < 3; j++ {
			flat[3*i+j] = x[i][j]
		}
	}

	return flat
}

func TestAccelerationInfiniteRecursion(t *testing.T) {
	x := [][3]float64{
		{-6.945985241354128, 8.067305539864824, -19.612162972084537}, {-1.8226665447078587, 12.25584328133353, -18.69535857373731}, {-6.388711979613657, -3.132089365435616, -18.605475789585622}, {-16.958927395852275, 13.801827168742578, -16.01685160601698}, {-1.4271822944404273, 2.4406432519690977, -15.53148457159786}, {3.911855084169895, 15.707342192758384, -14.129313138831513}, {-15.754498088219643, -6.51168204953912, -12.942860388029219}, {-11.63786657407229, 0.7148937962566702, -12.691188592404488}, {1.7906213781900364, 6.4853685387950994, -11.810337307717937}, {2.81528511751929, 11.500827894459341, -11.324970273298817}, {0.9097700935034848, -5.684760435343582, -11.21711093231679}, {11.084501259474672, 27.91342428055774, -10.947462579861725}, {10.904735691171295, -10.933915029802217, -10.839603238879697}, {-3.1349551933225173, 7.0785949141962465, -10.33625964763024}, {-1.1755104988156984, 10.602000052942453, -9.707080158568417}, {-1.373252623949414, 6.826923118571518, -8.664439862408825}, {15.362921785095065, 1.398002955809506, -7.334174656963829}, {-1.6608775332348187, 3.0518461842005826, -6.093792235670522}, {-11.026663641840805, -3.132089365435616, -6.039862565179508}, {-1.4092057376100897, 3.663049116432067, -5.518542417099712}, {-22.010339865177194, -9.190189017259451, -5.356753405626672}, {16.729140104200738, 3.339471093485987, -5.3208002919659965}, {30.481206079409144, -9.981157517794314, -4.493878677770459}, {22.625450744551532, 13.316460134323458, -4.421972450449108}, {-1.5170650785921163, 6.611204436607464, -4.296136552636743}, {6.71619794970259, 2.8001743885758534, -4.206253768485054}, {-1.0856277146640094, 1.4339560694701816, -3.451238381610867}, {-3.314720761625895, -5.828572889986284, -2.498480869602964}, {20.12670934513458, -4.444378014050274, -2.264785630808573}, {12.288930567107304, 9.954844007050292, -1.689535812237764}, {-3.2607910911348816, 4.9933143218770635, -1.3839343461220215}, {-0.20477642997745793, 14.718631567089806, -0.32331749313209207}, {-24.167526684817727, -3.401737717890683, -0.2873643794714165}, {-5.238212342472038, 12.040124599369475, 0.054190200305001435}, {4.594964243722731, 6.988712130044558, 0.41372133691175716}, {-1.786713431047183, -22.888325321976843, 0.7552759166881751}, {-5.292142012963051, -15.787585373993418, 1.8338693265084423}, {-2.0204086698415744, -3.6713860703457497, 1.9237521106601312}, {-3.8719940233663666, 4.921408094555712, 1.9597052243208068}, {3.013027242653006, -6.51168204953912, 2.1394707926241847}, {5.781416994525025, 12.74121031575265, 2.3012598040972247}, {-0.9777683736819828, 5.838212492902939, 2.3372129177579004}, {8.621712973718395, 4.166392707681525, 2.552931599721954}, {-1.3372995102887384, -11.203563382257283, 2.8046033953466827}, {0.8198873093517959, -0.956925988964744, 2.9124627363287097}, {-6.730266559390074, 7.0246652437052335, 2.9304392931590475}, {17.987499082324383, -7.302650550073983, 3.1461579751231006}, {-4.555103182919202, -9.298048358241477, 3.200087645614114}, {-0.6901434643965781, -2.2692146375794024, 3.667478123202897}, {-6.910032127693452, -5.756666662664933, 5.051672999138906}, {-13.327662916124043, -11.329399280069646, 5.069649555969244}, {-9.858187447868849, 10.45818759829975, 6.130266408959173}, {0.06487192247760888, -6.475728935878444, 6.274078863601876}, {-4.357361057785487, -11.329399280069646, 6.993141136815387}, {-9.175078288316014, -7.805994141323441, 7.802086194180587}, {7.507166450237452, 9.469476972631172, 7.873992421501939}, {-5.238212342472038, -1.9096835009726467, 8.413289126412073}, {-21.38116037611537, -18.304303330240707, 9.617718434044704}, {10.04186096331508, -6.871213186145876, 10.300827593597539}, {-13.813029950543163, -8.507079857706614, 11.145725764623416}, {7.075729086309345, 10.799742178076169, 12.134436390291993}, {7.255494654612724, 9.793054995577252, 12.386108185916724}, {5.260096846445229, 0.55310478478363, 13.123147015960573}, {-6.910032127693452, -10.071040301946002, 13.734349948192056}, {2.0422931738147656, -9.1182827899381, 17.02405984814387}, {-12.482764745098166, -14.31350771390572, 19.522801247560825}, {8.046463155147586, -8.255408062081885, 21.42831627157663}, {13.70907855670399, -19.400873296891312, 23.513596863895813}, {14.661836068711892, -1.8917069441423089, 25.58090089938466},
	}

	tree := NewTree(x)

	acc := make([][3]float64, len(x))
	tree.Acceleration(1.0, acc)
}

func TestAccelerationPlummer(t *testing.T) {
	filename := "plummer.txt"
	x, _ := readFile(filename)

	tree := NewTree(x)
	acc := make([][3]float64, len(x))
	tree.Acceleration(0.0, acc)

	// Pick a point.
	// Get acceleration at that point.
	point_indices := []int{100, 200, 300, 400}
	tests := []float64{
		59.368353172483474, 19.901143518711194,
		105.38602360919192, 198.25726650663177}

	for k, point_index := range point_indices {
		acc_at_point := acc[point_index]

		// fmt.Printf("%v———%v\n", x[point_index], acc[point_index])
		var acc_mag float64
		for i := 0; i < 3; i++ {
			acc_mag += acc_at_point[i] * acc_at_point[i]
		}
		acc_mag = math.Sqrt(acc_mag)

		// check if it matches
		if !almostEq(acc_mag, tests[k], 1e-3) {
			t.Errorf("(%d.0) expected acc = %.4f, got acc = %.4f", k, tests[k], acc_mag)
		}
	}
}
